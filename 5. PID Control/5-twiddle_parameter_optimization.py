# ----------------
# User Instructions
#
# Implement twiddle as shown in the previous two videos.
# Your accumulated error should be very small!
#
# You don't have to use the exact values as shown in the video
# play around with different values! This quiz isn't graded just see
# how low of an error you can get.
#
# Try to get your error below 1.0e-10 with as few iterations
# as possible (too many iterations will cause a timeout).
#
# No cheating!
# ------------

import random
import numpy as np
import matplotlib.pyplot as plt

# ------------------------------------------------
# 
# this is the Robot class
#

class Robot(object):
    def __init__(self, length=20.0):
        """
        Creates robot and initializes location/orientation to 0, 0, 0.
        """
        self.x = 0.0
        self.y = 0.0
        self.orientation = 0.0
        self.length = length
        self.steering_noise = 0.0
        self.distance_noise = 0.0
        self.steering_drift = 0.0

    def set(self, x, y, orientation):
        """
        Sets a robot coordinate.
        """
        self.x = x
        self.y = y
        self.orientation = orientation % (2.0 * np.pi)

    def set_noise(self, steering_noise, distance_noise):
        """
        Sets the noise parameters.
        """
        # makes it possible to change the noise parameters
        # this is often useful in particle filters
        self.steering_noise = steering_noise
        self.distance_noise = distance_noise

    def set_steering_drift(self, drift):
        """
        Sets the systematical steering drift parameter
        """
        self.steering_drift = drift

    def move(self, steering, distance, tolerance=0.001, max_steering_angle=np.pi / 4.0):
        """
        steering = front wheel steering angle, limited by max_steering_angle
        distance = total distance driven, most be non-negative
        """
        if steering > max_steering_angle:
            steering = max_steering_angle
        if steering < -max_steering_angle:
            steering = -max_steering_angle
        if distance < 0.0:
            distance = 0.0

        # apply noise
        steering2 = random.gauss(steering, self.steering_noise)
        distance2 = random.gauss(distance, self.distance_noise)

        # apply steering drift
        steering2 += self.steering_drift

        # Execute motion
        turn = np.tan(steering2) * distance2 / self.length

        if abs(turn) < tolerance:
            # approximate by straight line motion
            self.x += distance2 * np.cos(self.orientation)
            self.y += distance2 * np.sin(self.orientation)
            self.orientation = (self.orientation + turn) % (2.0 * np.pi)
        else:
            # approximate bicycle model for motion
            radius = distance2 / turn
            cx = self.x - (np.sin(self.orientation) * radius)
            cy = self.y + (np.cos(self.orientation) * radius)
            self.orientation = (self.orientation + turn) % (2.0 * np.pi)
            self.x = cx + (np.sin(self.orientation) * radius)
            self.y = cy - (np.cos(self.orientation) * radius)

    def __repr__(self):
        return '[x=%.5f y=%.5f orient=%.5f]' % (self.x, self.y, self.orientation)

############## ADD / MODIFY CODE BELOW ####################
# ------------------------------------------------------------------------
#
# run - does a single control run


def make_robot():
    """
    Resets the robot back to the initial position and drift.
    You'll want to call this after you call `run`.
    """
    robot = Robot()
    robot.set(0.0, 1.0, 0.0)
    robot.set_steering_drift(10.0 / 180.0 * np.pi)
    return robot


# NOTE: We use params instead of tau_p, tau_d, tau_i
def run(robot, params, n=100, speed=1.0):
    x_trajectory = []
    y_trajectory = []
    err = 0
    prev_cte = robot.y
    int_cte = 0
    for i in range(2 * n):
        cte = robot.y
        diff_cte = cte - prev_cte
        int_cte += cte
        prev_cte = cte
        steer = -params[0] * cte - params[1] * diff_cte - params[2] * int_cte
        robot.move(steer, speed)
        x_trajectory.append(robot.x)
        y_trajectory.append(robot.y)
        if i >= n:
            err += cte ** 2
    return x_trajectory, y_trajectory, err / n


# Make this tolerance bigger if you are timing out!
def twiddle(tol=0.001): 
    # Don't forget to call `make_robot` before every call of `run`!
    p = [0.0, 0.0, 0.0]
    dp = [1.0, 1.0, 1.0]
    robot = make_robot()
    x_trajectory, y_trajectory, best_err = run(robot, p)
    # TODO: twiddle loop here
    n = 0
    while sum(dp) > tol:
        for i in range(len(p)):
            p[i] += dp[i]
            robot = make_robot()
            x_trajectory, y_trajectory, err = run(robot, p)
            if err < best_err:
                best_err = err
                dp[i] *= 1.1
            else:
                # Try other direction
                p[i] -= 2 * dp[i]
                robot = make_robot()
                x_trajectory, y_trajectory, err = run(robot, p)
                if err < best_err:
                    best_err = err
                    dp[i] *= 1.1
                else:
                    # Retain original p[i] and make probing intervals smaller by factor of 0.9
                    p[i] += dp[i]
                    dp[i] *= 0.9
        n += 1
        print('Twiddle #', n, p, '->', best_err)
        
    return p, best_err


params, err = twiddle()
print("Final twiddle error = {}".format(err))
robot = make_robot()
x_trajectory, y_trajectory, err = run(robot, params)
n = len(x_trajectory)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 8))
ax1.plot(x_trajectory, y_trajectory, 'g', label='Twiddle PID controller')
ax1.plot(x_trajectory, np.zeros(n), 'r', label='reference')


# Output
# ('Twiddle #', 1, [1.0, 1.0, 0.0], '->', 0.0434970807256939)

# ('Twiddle #', 2, [1.0, 2.1, 0.0], '->', 0.03065437362443958)

# ('Twiddle #', 3, [1.9900000000000002, 3.3100000000000005, 0.0], '->', 0.007677320020068962)

# ('Twiddle #', 4, [3.0790000000000006, 4.641000000000001, 0.0], '->', 0.0032201674271162446)

# ('Twiddle #', 5, [4.276900000000001, 4.641000000000002, 0.0], '->', 0.0016645945527960435)

# ('Twiddle #', 6, [5.594590000000002, 5.9586900000000025, 0.0], '->', 0.0009761080831682494)

# ('Twiddle #', 7, [7.044049000000003, 7.408149000000003, 0.0], '->', 0.0006163432367765914)

# ('Twiddle #', 8, [8.638453900000004, 9.002553900000004, 0.0], '->', 0.00041102748054356214)

# ('Twiddle #', 9, [8.638453900000002, 10.756399290000004, 0.43046721000000016], '->', 0.00019877374116068796)

# ('Twiddle #', 10, [7.059993049000001, 12.685629219000006, 0.43046721000000016], '->', 1.176902590931792e-06)

# ('Twiddle #', 11, [5.323686112900001, 14.807782140900008, 0.43046721000000016], '->', 7.050884269315375e-07)

# ('Twiddle #', 12, [3.4137484831899996, 12.473413926810004, 0.43046721000000016], '->', 1.379736668887161e-12)

# ('Twiddle #', 13, [3.41374848319, 12.473413926810004, 0.43046721000000016], '->', 1.379736668887161e-12)

# ('Twiddle #', 14, [3.41374848319, 12.473413926810005, 0.4304672100000001], '->', 1.379736668887161e-12)

# ('Twiddle #', 15, [3.41374848319, 10.393491848055813, 0.4304672100000001], '->', 1.0756081254419683e-12)

# ('Twiddle #', 16, [3.41374848319, 10.393491848055813, 0.4304672100000001], '->', 1.0756081254419683e-12)

# ('Twiddle #', 17, [3.41374848319, 10.393491848055815, 0.4304672100000001], '->', 1.0756081254419683e-12)

# ('Twiddle #', 18, [3.41374848319, 12.2467024202258, 0.4304672100000001], '->', 8.12857772854578e-13)

# ('Twiddle #', 19, [3.4137484831900005, 12.2467024202258, 0.4304672100000001], '->', 8.12857772854578e-13)

# ('Twiddle #', 20, [3.413748483190001, 12.246702420225802, 0.4304672100000001], '->', 8.12857772854578e-13)

# ('Twiddle #', 21, [3.413748483190001, 12.246702420225802, 0.5790608989440293], '->', 2.626274371887853e-13)

# ('Twiddle #', 22, [3.413748483190001, 12.246702420225802, 0.5790608989440293], '->', 2.626274371887853e-13)

# ('Twiddle #', 23, [3.413748483190001, 12.246702420225802, 0.5790608989440293], '->', 2.626274371887853e-13)

# ('Twiddle #', 24, [3.4137484831900005, 12.2467024202258, 0.5790608989440293], '->', 2.626274371887853e-13)

# ('Twiddle #', 25, [3.413748483190001, 12.246702420225798, 0.5790608989440293], '->', 2.626274371887853e-13)

# ('Twiddle #', 26, [3.413748483190001, 12.2467024202258, 0.5790608989440293], '->', 2.626274371887853e-13)

# ('Twiddle #', 27, [2.933122768865246, 11.36918139722683, 0.4825435028210135], '->', 3.415464748206219e-14)

# ('Twiddle #', 28, [2.933122768865246, 12.334454522525697, 0.3763743670856961], '->', 2.2146601644375548e-14)

# ('Twiddle #', 29, [2.933122768865246, 11.272654084696942, 0.4931604163945453], '->', 1.1111316141677853e-15)

# ('Twiddle #', 30, [2.933122768865246, 11.272654084696942, 0.49316041639454533], '->', 1.1111316141677853e-15)

# ('Twiddle #', 31, [2.933122768865246, 11.27265408469694, 0.49316041639454533], '->', 1.1111316141677853e-15)

# ('Twiddle #', 32, [2.9331227688652466, 10.326589894591521, 0.49316041639454533], '->', 6.486248420974659e-16)

# ('Twiddle #', 33, [2.9331227688652466, 10.326589894591521, 0.49316041639454533], '->', 6.486248420974659e-16)

# ('Twiddle #', 34, [2.9331227688652466, 10.326589894591521, 0.49316041639454533], '->', 6.486248420974659e-16)

# ('Twiddle #', 35, [2.9331227688652466, 10.326589894591523, 0.4931604163945454], '->', 6.486248420974659e-16)

# ('Twiddle #', 36, [2.9331227688652466, 10.326589894591523, 0.49316041639454544], '->', 6.486248420974659e-16)

# ('Twiddle #', 37, [2.9331227688652466, 10.326589894591523, 0.49316041639454544], '->', 6.486248420974659e-16)

# ('Twiddle #', 38, [2.9331227688652466, 10.326589894591523, 0.4931604163945454], '->', 6.486248420974659e-16)

# ('Twiddle #', 39, [2.9331227688652466, 10.326589894591525, 0.49316041639454533], '->', 6.486248420974659e-16)

# ('Twiddle #', 40, [2.933122768865246, 10.326589894591526, 0.49316041639454533], '->', 6.486248420974659e-16)

# ('Twiddle #', 41, [2.9331227688652457, 10.326589894591526, 0.4931604163945453], '->', 6.486248420974659e-16)

# ('Twiddle #', 42, [2.9331227688652453, 10.326589894591526, 0.4931604163945453], '->', 6.486248420974659e-16)

# ('Twiddle #', 43, [2.9331227688652453, 10.326589894591528, 0.4931604163945453], '->', 6.486248420974659e-16)

# ('Twiddle #', 44, [2.9331227688652453, 10.32658989459153, 0.4931604163945453], '->', 6.486248420974659e-16)

# ('Twiddle #', 45, [2.9331227688652453, 10.326589894591532, 0.4931604163945452], '->', 6.486248420974659e-16)

# ('Twiddle #', 46, [2.9331227688652453, 10.32658989459153, 0.49316041639454516], '->', 6.486248420974659e-16)

# ('Twiddle #', 47, [2.933122768865245, 10.32658989459153, 0.49316041639454516], '->', 6.486248420974659e-16)

# ('Twiddle #', 48, [2.9331227688652453, 10.32658989459153, 0.49316041639454516], '->', 6.486248420974659e-16)

# ('Twiddle #', 49, [2.9331227688652457, 10.326589894591528, 0.4931604163945451], '->', 6.486248420974659e-16)

# ('Twiddle #', 50, [2.9331227688652457, 10.326589894591526, 0.4931604163945451], '->', 6.486248420974659e-16)

# ('Twiddle #', 51, [2.9331227688652457, 10.326589894591526, 0.49316041639454505], '->', 6.486248420974659e-16)

# ('Twiddle #', 52, [2.9331227688652457, 10.326589894591528, 0.49316041639454505], '->', 6.486248420974659e-16)

# ('Twiddle #', 53, [2.9331227688652457, 10.326589894591528, 0.493160416394545], '->', 6.486248420974659e-16)

# ('Twiddle #', 54, [2.9331227688652457, 10.32658989459153, 0.493160416394545], '->', 6.486248420974659e-16)

# ('Twiddle #', 55, [2.933122768865246, 10.326589894591532, 0.493160416394545], '->', 6.486248420974659e-16)

# ('Twiddle #', 56, [2.933122768865246, 10.326589894591534, 0.493160416394545], '->', 6.486248420974659e-16)

# ('Twiddle #', 57, [2.933122768865246, 10.326589894591532, 0.493160416394545], '->', 6.486248420974659e-16)

# ('Twiddle #', 58, [2.9331227688652466, 10.326589894591532, 0.49316041639454494], '->', 6.486248420974659e-16)

# ('Twiddle #', 59, [2.933122768865247, 10.326589894591532, 0.493160416394545], '->', 6.486248420974659e-16)

# ('Twiddle #', 60, [2.933122768865247, 10.32658989459153, 0.49316041639454505], '->', 6.486248420974659e-16)

# ('Twiddle #', 61, [2.933122768865247, 10.326589894591532, 0.49316041639454505], '->', 6.486248420974659e-16)

# ('Twiddle #', 62, [2.9331227688652475, 10.326589894591532, 0.49316041639454505], '->', 6.486248420974659e-16)

# ('Twiddle #', 63, [2.933122768865247, 10.326589894591534, 0.4931604163945451], '->', 6.486248420974659e-16)

# ('Twiddle #', 64, [2.933122768865247, 10.326589894591535, 0.49316041639454516], '->', 6.486248420974659e-16)

# ('Twiddle #', 65, [2.9224033180226057, 10.326589894591534, 0.4931604163945452], '->', 4.255727447457254e-17)

# ('Twiddle #', 66, [2.9224033180226057, 10.326589894591535, 0.4931604163945453], '->', 4.255727447457254e-17)

# ('Twiddle #', 67, [2.922403318022606, 10.326589894591535, 0.4931604163945453], '->', 4.255727447457254e-17)

# ('Twiddle #', 68, [2.922403318022606, 10.326589894591535, 0.4931604163945453], '->', 4.255727447457254e-17)

# ('Twiddle #', 69, [2.9224033180226057, 10.326589894591535, 0.4931604163945453], '->', 4.255727447457254e-17)

# ('Twiddle #', 70, [2.9224033180226057, 10.326589894591537, 0.4931604163945452], '->', 4.255727447457254e-17)

# ('Twiddle #', 71, [2.922403318022606, 10.326589894591539, 0.4931604163945453], '->', 4.255727447457254e-17)

# ('Twiddle #', 72, [2.922403318022606, 10.326589894591539, 0.4931604163945453], '->', 4.255727447457254e-17)

# ('Twiddle #', 73, [2.922403318022606, 10.32658989459154, 0.4931604163945453], '->', 4.255727447457254e-17)

# ('Twiddle #', 74, [2.9224033180226057, 10.32658989459154, 0.49316041639454533], '->', 4.255727447457254e-17)

# ('Twiddle #', 75, [2.9224033180226052, 10.32658989459154, 0.49316041639454533], '->', 4.255727447457254e-17)

# ('Twiddle #', 76, [2.9224033180226052, 10.32658989459154, 0.49316041639454533], '->', 4.255727447457254e-17)

# ('Twiddle #', 77, [2.9224033180226057, 10.32658989459154, 0.4931604163945453], '->', 4.255727447457254e-17)

# ('Twiddle #', 78, [2.9224033180226057, 10.326589894591539, 0.4931604163945452], '->', 4.255727447457254e-17)

# ('Twiddle #', 79, [2.9224033180226057, 10.326589894591539, 0.4931604163945453], '->', 4.255727447457254e-17)

# ('Twiddle #', 80, [2.9224033180226057, 10.326589894591537, 0.4931604163945453], '->', 4.255727447457254e-17)

# ('Twiddle #', 81, [2.9224033180226057, 10.326589894591537, 0.4931604163945453], '->', 4.255727447457254e-17)

# ('Twiddle #', 82, [2.9224033180226057, 10.326589894591535, 0.4931604163945453], '->', 4.255727447457254e-17)

# ('Twiddle #', 83, [2.9224033180226057, 10.326589894591534, 0.4931604163945453], '->', 4.255727447457254e-17)

# ('Twiddle #', 84, [2.9224033180226052, 10.326589894591534, 0.4931604163945452], '->', 4.255727447457254e-17)

# ('Twiddle #', 85, [2.922403318022605, 10.326589894591535, 0.4931604163945453], '->', 4.255727447457254e-17)

# ('Twiddle #', 86, [2.922403318022605, 10.326589894591535, 0.4931604163945453], '->', 4.255727447457254e-17)

# ('Twiddle #', 87, [2.9236935206453762, 10.326589894591534, 0.4931604163945453], '->', 4.2453139699552303e-17)

# ('Twiddle #', 88, [2.9236935206453762, 10.326589894591534, 0.4931604163945453], '->', 4.2453139699552303e-17)

# ('Twiddle #', 89, [2.9236935206453762, 10.326589894591535, 0.4931604163945453], '->', 4.2453139699552303e-17)

# ('Twiddle #', 90, [2.9225439501084867, 10.326589894591535, 0.49316041639454533], '->', 4.1533515273330525e-17)

# ('Twiddle #', 91, [2.9225439501084867, 10.326589894591537, 0.49316041639454533], '->', 4.1533515273330525e-17)

# ('Twiddle #', 92, [2.922543950108487, 10.326589894591535, 0.4931604163945453], '->', 4.1533515273330525e-17)

# ('Twiddle #', 93, [2.922543950108487, 10.326589894591535, 0.49316041639454533], '->', 4.1533515273330525e-17)

# ('Twiddle #', 94, [2.9234657907220187, 10.326589894591534, 0.49316041639454533], '->', 4.093428360656062e-17)

# ('Twiddle #', 95, [2.923465790722019, 10.326589894591534, 0.4931604163945453], '->', 4.093428360656062e-17)

# ('Twiddle #', 96, [2.923465790722019, 10.326589894591534, 0.49316041639454533], '->', 4.093428360656062e-17)

# ('Twiddle #', 97, [2.923465790722019, 10.326589894591534, 0.49327083233726654], '->', 4.004534644920951e-17)

# ('Twiddle #', 98, [2.9234657907220196, 10.326589894591532, 0.49327083233726654], '->', 4.004534644920951e-17)

# ('Twiddle #', 99, [2.92346579072202, 10.326589894591532, 0.4932708323372665], '->', 4.004534644920951e-17)

# ('Twiddle #', 100, [2.92346579072202, 10.327484355617, 0.49327083233726643], '->', 3.9945451158634863e-17)

# ('Twiddle #', 101, [2.9229268964347748, 10.327484355616999, 0.4932708323372665], '->', 3.9146506512217537e-17)

# ('Twiddle #', 102, [2.9229268964347748, 10.327484355617, 0.49327083233726643], '->', 3.9146506512217537e-17)

# ('Twiddle #', 103, [2.9229268964347748, 10.327484355617, 0.49327083233726643], '->', 3.9146506512217537e-17)

# ('Twiddle #', 104, [2.9229268964347748, 10.326767087320677, 0.4932708323372665], '->', 3.611461571199639e-17)

# ('Twiddle #', 105, [2.9229268964347748, 10.326767087320679, 0.4932708323372665], '->', 3.611461571199639e-17)

# ('Twiddle #', 106, [2.9229268964347748, 10.326767087320679, 0.49327083233726643], '->', 3.611461571199639e-17)

# ('Twiddle #', 107, [2.9229268964347743, 10.326767087320677, 0.4932708323372665], '->', 3.611461571199639e-17)

# Final twiddle error = 3.6114615712e-17
